// This file is auto-generated by @hey-api/openapi-ts

export type GetCategoriesData = {
    body?: never;
    path?: never;
    query?: {
        level?: string;
        key?: string;
        parentKey?: string;
    };
    url: '/categories';
};

export type GetCategoriesResponses = {
    /**
     * The list of categories
     */
    200: Array<{
        id: number;
        key: string;
        name: string;
        level: number;
        createdAt: string;
        parentId: number | null;
    }>;
};

export type GetCategoriesResponse = GetCategoriesResponses[keyof GetCategoriesResponses];

export type PostCategoriesData = {
    /**
     * The category to create
     */
    body: {
        key: string;
        name: string;
        level?: number;
        parentId?: number;
    };
    path?: never;
    query?: never;
    url: '/categories';
};

export type PostCategoriesErrors = {
    /**
     * Category name must be unique
     */
    422: {
        message: string;
        errors: Array<{
            path: string;
            message: string;
        }>;
    };
    /**
     * Error creating category
     */
    500: {
        message: string;
    };
};

export type PostCategoriesError = PostCategoriesErrors[keyof PostCategoriesErrors];

export type PostCategoriesResponses = {
    /**
     * The created category
     */
    201: {
        id: number;
        key: string;
        name: string;
        level: number;
        createdAt: string;
        parentId: number | null;
    };
};

export type PostCategoriesResponse = PostCategoriesResponses[keyof PostCategoriesResponses];

export type DeleteCategoriesByIdData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/categories/{id}';
};

export type DeleteCategoriesByIdErrors = {
    /**
     * Cannot delete category with associated products
     */
    400: {
        message: string;
    };
    /**
     * Category not found
     */
    404: {
        message: string;
    };
    /**
     * Invalid id error
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type DeleteCategoriesByIdError = DeleteCategoriesByIdErrors[keyof DeleteCategoriesByIdErrors];

export type DeleteCategoriesByIdResponses = {
    /**
     * Category deleted successfully
     */
    200: {
        message: string;
    };
};

export type DeleteCategoriesByIdResponse = DeleteCategoriesByIdResponses[keyof DeleteCategoriesByIdResponses];

export type GetCategoriesByIdData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/categories/{id}';
};

export type GetCategoriesByIdErrors = {
    /**
     * Category not found
     */
    404: {
        message: string;
    };
    /**
     * Invalid id error
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type GetCategoriesByIdError = GetCategoriesByIdErrors[keyof GetCategoriesByIdErrors];

export type GetCategoriesByIdResponses = {
    /**
     * The requested category
     */
    200: {
        id: number;
        key: string;
        name: string;
        level: number;
        createdAt: string;
        parentId: number | null;
    };
};

export type GetCategoriesByIdResponse = GetCategoriesByIdResponses[keyof GetCategoriesByIdResponses];

export type PatchCategoriesByIdData = {
    /**
     * The category updates
     */
    body: {
        key?: string;
        name?: string;
        level?: number;
        parentId?: number;
    };
    path: {
        id: number | null;
    };
    query?: never;
    url: '/categories/{id}';
};

export type PatchCategoriesByIdErrors = {
    /**
     * Category not found
     */
    404: {
        message: string;
    };
    /**
     * Category name must be unique
     */
    422: {
        message: string;
        errors: Array<{
            path: string;
            message: string;
        }>;
    };
    /**
     * Error updating category
     */
    500: {
        message: string;
    };
};

export type PatchCategoriesByIdError = PatchCategoriesByIdErrors[keyof PatchCategoriesByIdErrors];

export type PatchCategoriesByIdResponses = {
    /**
     * The updated category
     */
    200: {
        id: number;
        key: string;
        name: string;
        level: number;
        createdAt: string;
        parentId: number | null;
    };
};

export type PatchCategoriesByIdResponse = PatchCategoriesByIdResponses[keyof PatchCategoriesByIdResponses];

export type PostImagesData = {
    body?: {
        file: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/images';
};

export type PostImagesErrors = {
    /**
     * No File upload
     */
    400: {
        message: string;
    };
    /**
     * Upload failed
     */
    500: {
        message: string;
    };
};

export type PostImagesError = PostImagesErrors[keyof PostImagesErrors];

export type PostImagesResponses = {
    /**
     * the upload image
     */
    200: {
        message: string;
        filename: string;
        url: string;
    };
};

export type PostImagesResponse = PostImagesResponses[keyof PostImagesResponses];

export type GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type GetResponses = {
    /**
     * Wooilyo  Api Index
     */
    200: {
        message: string;
    };
};

export type GetResponse = GetResponses[keyof GetResponses];

export type GetProductsData = {
    body?: never;
    path?: never;
    query?: {
        page?: string;
        limit?: string;
        sortBy?: 'newest' | 'oldest' | 'name_asc' | 'name_desc';
        categoryIds?: string;
    };
    url: '/products';
};

export type GetProductsErrors = {
    /**
     * Invalid query parameters
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type GetProductsError = GetProductsErrors[keyof GetProductsErrors];

export type GetProductsResponses = {
    /**
     * The list of products with pagination
     */
    200: {
        data: Array<{
            id: number;
            name: string;
            subName: string;
            description: string;
            shortDescription: string;
            isVisible: boolean;
            createdAt: string;
            updatedAt: string;
            images: Array<{
                url: string;
                displayOrder: number;
                type: string;
            }>;
            categories: Array<{
                id: number;
                productId: number;
                categoryId: number;
                category: {
                    id: number;
                    key: string;
                    name: string;
                    level: number;
                    createdAt: string;
                    parentId: number | null;
                };
            }>;
            details: Array<{
                size: string;
                price: number;
            }>;
        }>;
        pagination: {
            total: number;
            page: number;
            limit: number;
            pages: number;
        };
    };
};

export type GetProductsResponse = GetProductsResponses[keyof GetProductsResponses];

export type PostProductsData = {
    /**
     * The product to create
     */
    body: {
        product: {
            name: string;
            subName: string;
            description: string;
            shortDescription: string;
            isVisible: boolean;
        };
        details?: Array<{
            size: string;
            price: number;
        }>;
        categoryIds?: Array<number>;
        images?: Array<{
            url: string;
            displayOrder: number;
            type: string;
        }>;
        isVisible?: boolean;
    };
    path?: never;
    query?: never;
    url: '/products';
};

export type PostProductsErrors = {
    /**
     * Validation error
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type PostProductsError = PostProductsErrors[keyof PostProductsErrors];

export type PostProductsResponses = {
    /**
     * The created product
     */
    201: {
        id: number;
        name: string;
        subName: string;
        description: string;
        shortDescription: string;
        isVisible: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type PostProductsResponse = PostProductsResponses[keyof PostProductsResponses];

export type DeleteProductsByIdData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/products/{id}';
};

export type DeleteProductsByIdErrors = {
    /**
     * Product not found
     */
    404: {
        message: string;
    };
    /**
     * Invalid id error
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type DeleteProductsByIdError = DeleteProductsByIdErrors[keyof DeleteProductsByIdErrors];

export type DeleteProductsByIdResponses = {
    /**
     * Product deleted successfully
     */
    200: {
        message: string;
    };
};

export type DeleteProductsByIdResponse = DeleteProductsByIdResponses[keyof DeleteProductsByIdResponses];

export type GetProductsByIdData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/products/{id}';
};

export type GetProductsByIdErrors = {
    /**
     * Product not found
     */
    404: {
        message: string;
    };
    /**
     * Invalid id error
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type GetProductsByIdError = GetProductsByIdErrors[keyof GetProductsByIdErrors];

export type GetProductsByIdResponses = {
    /**
     * The requested product
     */
    200: {
        id: number;
        name: string;
        subName: string;
        description: string;
        shortDescription: string;
        isVisible: boolean;
        createdAt: string;
        updatedAt: string;
        images: Array<{
            url: string;
            displayOrder: number;
            type: string;
        }>;
        categories: Array<{
            id: number;
            productId: number;
            categoryId: number;
            category: {
                id: number;
                key: string;
                name: string;
                level: number;
                createdAt: string;
                parentId: number | null;
            };
        }>;
        details: Array<{
            size: string;
            price: number;
        }>;
    };
};

export type GetProductsByIdResponse = GetProductsByIdResponses[keyof GetProductsByIdResponses];

export type PatchProductsByIdData = {
    /**
     * The product updates
     */
    body: {
        product: {
            name?: string;
            subName?: string;
            description?: string;
            shortDescription?: string;
            isVisible?: boolean;
        };
        details?: Array<{
            size: string;
            price: number;
        }>;
        categoryIds?: Array<number>;
        images?: Array<{
            url: string;
            displayOrder: number;
            type: string;
        }>;
        isVisible?: boolean;
    };
    path: {
        id: number | null;
    };
    query?: never;
    url: '/products/{id}';
};

export type PatchProductsByIdErrors = {
    /**
     * Invalid product data
     */
    400: {
        message: string;
    };
    /**
     * Product not found
     */
    404: {
        message: string;
    };
    /**
     * Validation error(s)
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    } | {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type PatchProductsByIdError = PatchProductsByIdErrors[keyof PatchProductsByIdErrors];

export type PatchProductsByIdResponses = {
    /**
     * The updated product
     */
    200: {
        id: number;
        name: string;
        subName: string;
        description: string;
        shortDescription: string;
        isVisible: boolean;
        createdAt: string;
        updatedAt: string;
    };
};

export type PatchProductsByIdResponse = PatchProductsByIdResponses[keyof PatchProductsByIdResponses];

export type PostProductsByIdImagesData = {
    body?: {
        file: Blob | File;
        type?: string;
        displayOrder?: string;
    };
    path: {
        id: number | null;
    };
    query?: never;
    url: '/products/{id}/images';
};

export type PostProductsByIdImagesErrors = {
    /**
     * No file uploaded
     */
    400: {
        message: string;
    };
    /**
     * Product not found
     */
    404: {
        message: string;
    };
    /**
     * Upload failed
     */
    500: {
        message: string;
    };
};

export type PostProductsByIdImagesError = PostProductsByIdImagesErrors[keyof PostProductsByIdImagesErrors];

export type PostProductsByIdImagesResponses = {
    /**
     * The uploaded image
     */
    200: {
        message: string;
        url: string;
    };
};

export type PostProductsByIdImagesResponse = PostProductsByIdImagesResponses[keyof PostProductsByIdImagesResponses];

export type ClientOptions = {
    baseUrl: 'http://192.168.45.154:5000' | (string & {});
};