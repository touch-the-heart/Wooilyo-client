// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-next';
import type { GetCategoriesData, GetCategoriesResponse, PostCategoriesData, PostCategoriesResponse, PostCategoriesError, DeleteCategoriesByIdData, DeleteCategoriesByIdResponse, DeleteCategoriesByIdError, GetCategoriesByIdData, GetCategoriesByIdResponse, GetCategoriesByIdError, PatchCategoriesByIdData, PatchCategoriesByIdResponse, PatchCategoriesByIdError, PostImagesData, PostImagesResponse, PostImagesError, GetData, GetResponse, GetProductsData, GetProductsResponse, GetProductsError, PostProductsData, PostProductsResponse, PostProductsError, DeleteProductsByIdData, DeleteProductsByIdResponse, DeleteProductsByIdError, GetProductsByIdData, GetProductsByIdResponse, GetProductsByIdError, PatchProductsByIdData, PatchProductsByIdResponse, PatchProductsByIdError, PostProductsByIdImagesData, PostProductsByIdImagesResponse, PostProductsByIdImagesError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getCategories = <ThrowOnError extends boolean = false>(options?: Options<GetCategoriesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCategoriesResponse, unknown, ThrowOnError>({
        url: '/categories',
        ...options
    });
};

export const postCategories = <ThrowOnError extends boolean = false>(options: Options<PostCategoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCategoriesResponse, PostCategoriesError, ThrowOnError>({
        url: '/categories',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteCategoriesById = <ThrowOnError extends boolean = false>(options: Options<DeleteCategoriesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCategoriesByIdResponse, DeleteCategoriesByIdError, ThrowOnError>({
        url: '/categories/{id}',
        ...options
    });
};

export const getCategoriesById = <ThrowOnError extends boolean = false>(options: Options<GetCategoriesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCategoriesByIdResponse, GetCategoriesByIdError, ThrowOnError>({
        url: '/categories/{id}',
        ...options
    });
};

export const patchCategoriesById = <ThrowOnError extends boolean = false>(options: Options<PatchCategoriesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchCategoriesByIdResponse, PatchCategoriesByIdError, ThrowOnError>({
        url: '/categories/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postImages = <ThrowOnError extends boolean = false>(options?: Options<PostImagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostImagesResponse, PostImagesError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/images',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResponse, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const getProducts = <ThrowOnError extends boolean = false>(options?: Options<GetProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProductsResponse, GetProductsError, ThrowOnError>({
        url: '/products',
        ...options
    });
};

export const postProducts = <ThrowOnError extends boolean = false>(options: Options<PostProductsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProductsResponse, PostProductsError, ThrowOnError>({
        url: '/products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteProductsById = <ThrowOnError extends boolean = false>(options: Options<DeleteProductsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProductsByIdResponse, DeleteProductsByIdError, ThrowOnError>({
        url: '/products/{id}',
        ...options
    });
};

export const getProductsById = <ThrowOnError extends boolean = false>(options: Options<GetProductsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProductsByIdResponse, GetProductsByIdError, ThrowOnError>({
        url: '/products/{id}',
        ...options
    });
};

export const patchProductsById = <ThrowOnError extends boolean = false>(options: Options<PatchProductsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchProductsByIdResponse, PatchProductsByIdError, ThrowOnError>({
        url: '/products/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postProductsByIdImages = <ThrowOnError extends boolean = false>(options: Options<PostProductsByIdImagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProductsByIdImagesResponse, PostProductsByIdImagesError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/products/{id}/images',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};